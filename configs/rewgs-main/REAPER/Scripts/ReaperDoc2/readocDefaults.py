# readocDefaults.py - default data object# Copyright 2012 - Cy Ball## This file is part of ReaperDoc2.## ReaperDoc2 is free software: you can redistribute it and/or modify# it as you please.## ReaperDoc2 is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.try :    from reaper_python import *    __reaper__ = Trueexcept ImportError :    __reaper__ = False# global constants# keysdefDateForm = '<DateForm>'defTimeForm = '<TimeForm>'defSeparator = '<Separator>'defProject = '<LastProject>'defTemplate = '<LastTemplate>'defOutput = '<LastOutput>'#defScreenX = '<ScreenX>'#defScreenY = '<ScreenY>'# separatorsdfbr = '<BR>'dfspace = ' 'dfcomma = ','dfcr = '\r'dflf = '\n'dfcrlf = '\r\n'dftab = '\t'dfseparators = {dfbr:dfbr,                'space':dfspace,                'comma':dfcomma,                'cr':dfcr,                'linefeed':dflf,                'crlf':dfcrlf,                'tab':dftab}# formats for date and timedfdate1 = '%Y-%m-%d'dfdate2 = '%m-%d-%Y'dfdate3 = '%d-%m-%Y'dfdate4 = '%A, %B %d, %Y'dfdateforms = {'yyyy-mm-dd':dfdate1,             'mm-dd-yyyy':dfdate2,             'dd-mm-yyyy':dfdate3,             'DayOfWeek, Month dd, yyyy':dfdate4}dftime1 = '%H:%M:%S'dftime2 = '%H:%M'dftime3 = '%I:%M:%S%p'dftime4 = '%I:%M%p'dftimeforms = {'hh:mm:ss':dftime1,             'hh:mm':dftime2,             'hh:mm:ss am/pm':dftime3,             'hh:mm am/pm':dftime4}docDefaults = {}import os, sys, inspecttry:    import tkinter as tk    from tkinter import messagebox as tkMessageBoxexcept ImportError:    import Tkinter as tk    import tkMessageBox    def read_dictionary(filename):    dict = {}    try:        file = open(filename, 'r')        for line in file.readlines():            defaults = line.rstrip('\n').split(';')            dict[defaults[0]] = defaults[1]        file.close()    except IOError:        dict = {}    return dict   #end def read_dictionarydef write_dictionary(filename, dict):    if dict:        try:            saveFile = open(filename, 'w')            for k,v in dict.items():                if v is None : v = ''                saveFile.write(k+';'+v+'\n')            saveFile.close()        except IOError:            pass     #end def write_dictionarydef get_create_defaults(filename):    temp = os.path.abspath(sys.path[0])+'\\templates\\default_template.htm'    if os.path.isfile(filename):        dict = read_dictionary(filename)    else:        dict = {defSeparator:'<BR>', defDateForm:'yyyy-mm-dd', defTimeForm:'hh:mm:ss', defProject:None, defOutput:None, defTemplate:temp}    return dict   #end def get_create_defaults#test itif __name__ == '__main__':    import inspect    dict = {}    defaultfile = os.path.dirname(os.path.abspath(        inspect.getfile(inspect.currentframe())))+'\\'+'testDoc2.ini'    print (defaultfile)    try:        confirmation = raw_input('Confirm removal for first tests: ')    except:        confirmation = input('Confirm removal for first tests: ')    if confirmation == 'y':        print ("removing '%s'" % defaultfile)        try:            os.remove(defaultfile)        except:            pass                write_dictionary(defaultfile,dict)        print('Write empty dict',dict)        dict = read_dictionary(defaultfile)        print('Read no file',dict)    dict = {'<name1>':'vname1','<name2>':'vname2'}    print('full dict ',dict)    write_dictionary(defaultfile,dict)    print('Write ', dict)    dict = {}    dict = read_dictionary(defaultfile)    print('Read ',dict)        try:        confirmation = raw_input('Confirm removal for get_create: ')    except:        confirmation = input('Confirm removal for get_create: ')    if confirmation == 'y':        print ("removing '%s'" % defaultfile)        try:            os.remove(defaultfile)        except:            pass            dict = get_create_defaults(defaultfile)    print('get_create ',dict)    print(dfseparators.keys())