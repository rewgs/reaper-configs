# readocSubs.py - default data object# Copyright 2012 - Cy Ball## This file is part of ReaperDoc2.## ReaperDoc2 is free software: you can redistribute it and/or modify# it as you please.## ReaperDoc2 is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#--- other constants + various module imports ---try :    from reaper_python import *except ImportError :    passimport os.pathtry:    import tkinter as tk    from tkinter import messagebox as tkMessageBox    python2 = Falseexcept ImportError:    import Tkinter as tk    import tkMessageBox    python2 = Trueimport datetimefrom readocDefaults import *import webbrowserfrom math import logsubDocDefaults = {}TAG_TRACK_START = "<!-- TRACK-START -->"TAG_TRACK_END = "<!-- TRACK-END -->"TAG_FX_START = "<!-- FX-START -->"TAG_FX_END = "<!-- FX-END -->"TAG_ITEM_START = "<!-- ITEM-START -->"TAG_ITEM_END = "<!-- ITEM-END -->"TAG_SEND_START = "<!-- SEND-START -->"TAG_SEND_END = "<!-- SEND-END -->"TAG_RECEIVE_START = "<!-- RECEIVE-START -->"TAG_RECEIVE_END = "<!-- RECEIVE-END -->"IFSTRING = "(#IF"ELSESTRING = "##ELSE"ENDIFSTRING = "##END-IF#)"sTab = '\t'ProjectInfo = {'pName':None,               'pNotes':'',               'pVersion':None,               'pSampleRate':None,               'pBeatsPerMinute':0.0,               'pTimeSig':0,               'pTimeSig2':0}iTDCount = 0TDValues = []TrackCount = 0TrackInfo = []EffectCount = 0ItemInfo = [] # this will be a array of lists of dict items              # trackno,itemlist of dictTrackType = {'tName':None,             'tPan':0.0,             'tType':None,             'tMute':False,             'tSolo':False,             'tVolume':0.0,             'tEffectCount':0,             'tItemCount':0,             'tSendRcvCount':0,             'tIsGroup':False,             'tInGroup':False}ItemType = {'iPosition':0.0,            'iLength':0.0,            'iName':None,            'iPan':0.0,            'iMute':False,            'iVolume':0.0,            'iGroup':0}SendRcvInfo = []SendRcvType = {'sSendRcv':None,      #S = Send, R = Receive.  Project file only stores Receives               'sSendTrack':None,    #Sending track number (zero based)               'sFade':0,            #0 = Post Fader, 1 = Pre-FX, 2 = Post-FX               'sVolume':0.0,               'sPan':0.0,               'sMute':False,               'sAudioFrom':0,               'sAudioTo':0,               'sMidiFromTo':0}     #low 5 bits = MIDI TO, next 5 bits = MIDI FROMEffectInfo = []EffectType = {'eType':None,              'eName':None,              'eDLL':None,              'eBypass':False}TrackCount = 0def setglobals():    global ProjectInfo    global iTDCount    global TDValues    global TrackCount    global TrackInfo    global ItemInfo    global TrackType    global ItemType    global SendRcvInfo    global SendRcvType    global EffectCount    global EffectInfo    global EffectType    global TrackCount    ProjectInfo = {'pName':None,               'pNotes':'',               'pVersion':None,               'pSampleRate':None,               'pBeatsPerMinute':0.0,               'pTimeSig':0,               'pTimeSig2':0}    iTDCount = 0    TDValues = []    TrackCount = 0    TrackInfo = []    TrackType = {'tName':None,                 'tPan':0.0,                 'tType':None,                 'tMute':False,                 'tSolo':False,                 'tVolume':0.0,                 'tEffectCount':0,                 'tItemCount':0,                 'tSendRcvCount':0,                 'tIsGroup':False,                 'tInGroup':False}    ItemInfo = [] # this will be a array of lists of dict items                  # trackno,itemlist of dict    ItemType = {'iPosition':0.0,                'iLength':0.0,                'iName':None,                'iPan':0.0,                'iMute':False,                'iVolume':0.0,                'iGroup':0}    SendRcvInfo = []    SendRcvType = {'sSendRcv':None,      #S = Send, R = Receive.  Project file only stores Receives                   'sSendTrack':None,    #Sending track number (zero based)                   'sFade':0,            #0 = Post Fader, 1 = Pre-FX, 2 = Post-FX                   'sVolume':0.0,                   'sPan':0.0,                   'sMute':False,                   'sAudioFrom':0,                   'sAudioTo':0,                   'sMidiFromTo':0}     #low 5 bits = MIDI TO, next 5 bits = MIDI FROM    EffectCount = 0    EffectInfo = []    EffectType = {'eType':None,                  'eName':None,                  'eDLL':None,                  'eBypass':False}    TrackCount = 0    # end def setglobals    def readprojectfile(sFilename):    global ProjectInfo    global iTDCount    global TDValues    global TrackCount    global TrackInfo    global EffectCount    global TrackType    global ItemType    global ItemInfo    global SendRcvInfo    global SendRcvType    global EffectInfo    global EffectType    setglobals()        bInNotes = False    bInProject = False    bInTrack = False    bInItem = False    bInGroup = False    file = open(sFilename, 'r')        ProjectInfo['pName'] = sFilename    ProjectInfo['pNotes'] = ''    ProjectInfo['pVersion'] = None        for s in file.readlines():        s = s.strip()        #parse words        TDValues = s.split()        #count words        iTDCount = len(TDValues)        # get first two quoted strings        sQuotedString = GetQuotedString(s, 1)        sQuotedString2 = GetQuotedString(s, 2)        if iTDCount > 0:                        #Project Level info            if TDValues[0] == "<REAPER_PROJECT":                bInProject = True                bInTrack = False                bInNotes = False                bIsGroup = False                ProjectInfo['pVersion'] = TDValues[1]                                # item            elif TDValues[0] == "<ITEM":                bInItem = True                TrackInfo[itrk]['tItemCount'] = TrackInfo[itrk]['tItemCount'] + 1                ItemInfo[itrk].append(ItemType.copy())                                # Mute/bypass            elif TDValues[0] == "BYPASS":                bBypass = int(TDValues[1])                                #Group?            elif TDValues[0] == "ISBUS":                iTemp = int(TDValues[1])                bIsGroup = False                if iTemp == 1 :                    bIsGroup = True                    bInGroup = False                                TrackInfo[TrackCount-1]['tIsGroup'] = bIsGroup                TrackInfo[TrackCount-1]['tInGroup'] = bInGroup                                if iTemp == 1 :                    bInGroup = True   #Following tracks are in group                if iTemp == 2 :                    bInGroup = False  #Following tracks are not in group                                    #Track start            elif TDValues[0] == "<TRACK" :                bInProject = False                bInTrack = True                bInNotes = False                EffectCount = 0                TrackInfo.append(TrackType.copy())                TrackCount = TrackCount + 1                itrk = TrackCount - 1                TrackInfo[itrk]['tName'] = ""                TrackInfo[itrk]['tPan'] = 0                TrackInfo[itrk]['tType'] = ""                TrackInfo[itrk]['tMute'] = False                TrackInfo[itrk]['tSolo'] = False                TrackInfo[itrk]['tVolume'] = 0                TrackInfo[itrk]['tEffectCount'] = 0                TrackInfo[itrk]['tItemCount'] = 0                TrackInfo[itrk]['tSendRcvCount'] = 0                # must have an item list for this track even if null                ItemInfo.append([])                SendRcvInfo.append([])                EffectInfo.append([])                                #End notes or item            elif TDValues[0] == ">" :                bInNotes = False                bInItem = False                                #Accumulate notes            elif bInNotes == True :                if ProjectInfo['pNotes'] :                    ProjectInfo['pNotes'] = ProjectInfo['pNotes'] + "<br>"                ProjectInfo['pNotes'] = ProjectInfo['pNotes'] + s                                #Item tags            elif bInItem == True :                itm = TrackInfo[itrk]['tItemCount']-1                if TDValues[0] == "POSITION" :                    ItemInfo[itrk][itm]['iPosition'] = float(TDValues[1])                elif TDValues[0] == "LENGTH" :                    ItemInfo[itrk][itm]['iLength'] = float(TDValues[1])                elif TDValues[0] == "MUTE" :                    if int(TDValues[1]) == 0 :                        mybool = False                    else:                        mybool = True                    ItemInfo[itrk][itm]['iMute'] = mybool                elif TDValues[0] == "GROUP" :                    ItemInfo[itrk][itm]['iGroup'] = int(TDValues[1])                elif TDValues[0] == "NAME" :                    ItemInfo[itrk][itm]['iName'] = sQuotedString                elif TDValues[0] == "VOLPAN" :                    ItemInfo[itrk][itm]['iVolume'] = float(TDValues[1])                    ItemInfo[itrk][itm]['iPan'] = float(TDValues[2])                                    #Project tags            elif bInProject == True :                if TDValues[0] == "<NOTES" :                    bInNotes = True                elif TDValues[0] == "SAMPLERATE" :                    ProjectInfo['pSampleRate'] = TDValues[1]                elif TDValues[0] == "TEMPO" :                    ProjectInfo['pBeatsPerMinute'] = float(TDValues[1])                    ProjectInfo['pTimeSig'] = int(TDValues[2])                    ProjectInfo['pTimeSig2'] = int(TDValues[3])                                    #Track Level Info            elif bInTrack == True :                if TDValues[0] == "NAME" :                    TrackInfo[itrk]['tName'] = sQuotedString                elif TDValues[0] == "VOLPAN" :                    TrackInfo[itrk]['tVolume'] = float(TDValues[1])                    TrackInfo[itrk]['tPan'] = float(TDValues[2])                                elif TDValues[0] == "AUXRECV" :                    newSendRcv = SendRcvType.copy()                    TrackInfo[itrk]['tSendRcvCount'] = TrackInfo[itrk]['tSendRcvCount'] + 1                    isendrcv = TrackInfo[itrk]['tSendRcvCount'] - 1                    newSendRcv['sSendRcv'] = "R"    #Receive                    newSendRcv['sSendTrack'] = int(TDValues[1]) + 1                    newSendRcv['sFade'] = int(TDValues[2])                    newSendRcv['sVolume'] = float(TDValues[3])                    newSendRcv['sPan'] = float(TDValues[4])                    if int(TDValues[5]) == 0 : mybool = False                    else : mybool = True                    newSendRcv['sMute'] = mybool                    newSendRcv['sAudioFrom'] = int(TDValues[8])                    newSendRcv['sAudioTo'] = int(TDValues[9])                    newSendRcv['sMidiFromTo'] = int(TDValues[11])                    SendRcvInfo[itrk].append(newSendRcv)                                    elif TDValues[0] == "MUTESOLO" :                    if int(TDValues[1]) == 0 : mybool = False                    else: mybool = True                    TrackInfo[itrk]['tMute'] = mybool                    if int(TDValues[2]) == 0 : mybool = False                    else : mybool = True                    TrackInfo[itrk]['tSolo'] = mybool                                    elif TDValues[0] in ["<VST", "<DX", "<JS"] :                    newEffect = EffectType.copy()                    TrackInfo[itrk]['tEffectCount'] = TrackInfo[itrk]['tEffectCount'] + 1                    newEffect['eName'] = sQuotedString   #first quoted string is the name                    newEffect['eDLL'] = sQuotedString2   #second quoted string is the file name                    newEffect['eType'] = TDValues[0][1:]                    newEffect['eBypass'] = bBypass                    EffectInfo[itrk].append(newEffect)    # for every receive create a send    for itrk in range(TrackCount):        if TrackInfo[itrk]['tSendRcvCount'] > 0 :            for isendrcv in range(TrackInfo[itrk]['tSendRcvCount']):                if SendRcvInfo[itrk][isendrcv]['sSendRcv'] == 'R' :                    ToTrack = SendRcvInfo[itrk][isendrcv]['sSendTrack'] - 1                    TrackInfo[ToTrack]['tSendRcvCount'] = TrackInfo[ToTrack]['tSendRcvCount'] + 1                    newSendRcv = dict(SendRcvInfo[itrk][isendrcv])                    newSendRcv['sSendRcv'] = 'S'                    newSendRcv['sSendTrack'] = itrk                    SendRcvInfo[ToTrack].append(newSendRcv)            file.close()    #end def readprojectfiledef GetQuotedString(s, iStringNum):    # find the iStringNum instance of a quoted string in string s.    iStart = -1    iEnd = -1    for i in range(iStringNum):        #find start and end of ith quoted string        iStart = s.find('\"', iEnd+1)        iEnd = s.find('\"', iStart+1)    if iStart > -1:        return s[iStart+1:iEnd]    else:        return None    #end def GetQuotedString#Format the project info into RTF formatdef formatprojectfile(sFilename, sTemplateFileName, dDefaults, parent = None):    global subDocDefaults    IFSTRING = "(#IF"    ELSESTRING = "##ELSE"    ENDIFSTRING = "##END-IF#)"    subDocDefaults = dDefaults    # check if document file already exists.    if os.path.exists(sFilename):        resp = tkMessageBox.askyesno(title='File Exists',                                     message='The output file: '+sFilename+\                                     ' already exists.  Do you want to overwrite it?')        if not resp :            if parent is None:                root.destroy()            return False    filetemp = open(sTemplateFileName, 'rb')    sTemplate = filetemp.read()    #Replace project level info    if python2 :        sOutPage = str(sTemplate)    else :        sOutPage = str(sTemplate,encoding='ascii')    sOutPage = sOutPage.replace("##FILE-NAME##", ProjectInfo['pName'])    sOutPage = sOutPage.replace("##TEMPLATE-NAME##", sTemplateFileName)    sOutPage = sOutPage.replace("##OUTPUT-NAME##", sFilename)    sOutPage = sOutPage.replace("##VERSION##", ProjectInfo['pVersion'])    sOutPage = sOutPage.replace("##TEMPO##",                                str(ProjectInfo['pBeatsPerMinute']) + \                                " BPM " + str(ProjectInfo['pTimeSig']) + \                                "/" + str(ProjectInfo['pTimeSig2']))    sOutPage = sOutPage.replace("##SAMPLE-RATE##", ProjectInfo['pSampleRate'])    sOutPage = sOutPage.replace("##NOTES##", ProjectInfo['pNotes'].replace("|", ""))    dfmt = dfdateforms[dDefaults[defDateForm]]    tfmt = dftimeforms[dDefaults[defTimeForm]]    sOutPage = sOutPage.replace("##DATE##", datetime.datetime.now().strftime(dfmt))    sOutPage = sOutPage.replace("##TIME##", datetime.datetime.now().strftime(tfmt))    #Separate out the track info    iPos = 0    iPos = sOutPage.find(TAG_TRACK_START)    if iPos > -1 :        sOutHeader = sOutPage[:iPos]        iPos = iPos + len(TAG_TRACK_START)        iPos2 = sOutPage[iPos:].find(TAG_TRACK_END)        if iPos2 > -1 :            sInTrack = sOutPage[iPos:iPos2 + iPos]            iPos2 = iPos2 + iPos + len(TAG_TRACK_END)            sOutFooter = sOutPage[iPos2:]            #Loop through all the tracks            for i in range(TrackCount):                sOutTrack = sInTrack                                #Handle If Then Else structure                #creates a template for each track                                iIfPos = sOutTrack.find(IFSTRING)                iElsePos = sOutTrack.find(ELSESTRING)                iEndIfPos = sOutTrack.find(ENDIFSTRING)                while (iIfPos > -1) :                    if (iIfPos > -1 and iElsePos > -1 and iEndIfPos > -1 \                        and iElsePos > iIfPos and iEndIfPos > iElsePos) :                        sFirstPart = sOutTrack[:iIfPos]                        sEndPart = sOutTrack[iEndIfPos + len(ENDIFSTRING):]                        sIfThenElseChunk = sOutTrack[iIfPos + len(IFSTRING):iEndIfPos]                        #Now get condition, if chunk and else chunk                        iConditionLen = 0                        if sIfThenElseChunk[:len("-IS-GROUP")] == "-IS-GROUP" : iConditionLen = len("-IS-GROUP")                        if sIfThenElseChunk[:len("-IN-GROUP")] == "-IN-GROUP" : iConditionLen = len("-IN-GROUP")                        if sIfThenElseChunk[:len("-IS-MUTED")] == "-IS-MUTED" : iConditionLen = len("-IS-MUTED")                        #Test condition                        if iConditionLen > 0 :                            sCondition = sIfThenElseChunk[:iConditionLen]                            iIfPos = iConditionLen                            iElsePos = sIfThenElseChunk.find(ELSESTRING)                            sIfChunk = sIfThenElseChunk[iIfPos:iElsePos]                            sElseChunk = sIfThenElseChunk[iElsePos + len(ELSESTRING):]                                                        bCondition = False                            if sCondition == "-IS-GROUP" and TrackInfo[i]['tIsGroup'] == True : bCondition = True                            if sCondition == "-IN-GROUP" and TrackInfo[i]['tInGroup'] == True : bCondition = True                            if sCondition == "-IS-MUTED" and TrackInfo[i]['tMute'] == True : bCondition = True                                                        if bCondition == True :                                sOutTrack = sFirstPart + sIfChunk + sEndPart                            else :                                sOutTrack = sFirstPart + sElseChunk + sEndPart                        else :                            sOutTrack = "##Invalid If-Then-Else format## " + sOutTrack                            iIfPos = 0                    else :                        if iIfPos > -1 or iElsePos > -1 or iEndIfPos > -1 :                            sOutTrack = "##Invalid If-Then-Else format## " + sOutTrack                        iIfPos = 0                                        iIfPos = sOutTrack.find(IFSTRING)                    iElsePos = sOutTrack.find(ELSESTRING)                    iEndIfPos = sOutTrack.find(ENDIFSTRING)                #end while                sOutTrack = sOutTrack.replace("##TRACK-NUM##", str(i+1))                sOutTrack = sOutTrack.replace("##TRACK-NAME##", TrackInfo[i]['tName'])                sOutTrack = sOutTrack.replace("##VOLUME##", FormatVol(TrackInfo[i]['tVolume']))                sOutTrack = sOutTrack.replace("##PAN##", FormatPan(TrackInfo[i]['tPan']))                sOutTrack = sOutTrack.replace("##MUTE##", FormatIfTrue(TrackInfo[i]['tMute'], "Mute"))                sOutTrack = sOutTrack.replace("##SOLO##", FormatIfTrue(TrackInfo[i]['tSolo'], "Solo"))                sOutTrack = sOutTrack.replace("##FX-LIST##", GetFXList(i))                sOutTrack = sOutTrack.replace("##ITEM-LIST##", GetItemList(i))                sOutTrack = sOutTrack.replace("##SEND-LIST##", GetSendList(i))                sOutTrack = sOutTrack.replace("##RCV-LIST##", GetRcvList(i))                sOutTrack = sOutTrack.replace("##IS-GROUP##", FormatIfTrue(TrackInfo[i]['tIsGroup'], "Is Group"))                sOutTrack = sOutTrack.replace("##IN-GROUP##", FormatIfTrue(TrackInfo[i]['tInGroup'], "In Group"))                                #----EFFECTS----                iPosFXStart = 0                iPosFXStart = sOutTrack[iPosFXStart:].find(TAG_FX_START)                if (iPosFXStart > -1) :                    sOutTrackHeader = sOutTrack[:iPosFXStart]                    iPosFXStart = iPosFXStart + len(TAG_FX_START)                            iPosFXEnd = sOutTrack[iPosFXStart:].find(TAG_FX_END)                    if (iPosFXEnd > -1) :                        iPosFXEnd = iPosFXEnd + iPosFXStart                        sInFX = sOutTrack[iPosFXStart:iPosFXEnd]                        iPosFXEnd = iPosFXEnd + len(TAG_FX_END)                        sOutTrackFooter = sOutTrack[iPosFXEnd:]                    else :                        sInFX = ''                        sOutTrackFooter = sOutTrack[iPosFXStart:]                    #Loop through all the effects                    for j in range(TrackInfo[i]['tEffectCount']) :                        sOutFX = sInFX                        sOutFX = sOutFX.replace("##FX-NUM##", '%d' % (j+1))                        sOutFX = sOutFX.replace("##FX-NAME##", EffectInfo[i][j]['eName'])                        sOutFX = sOutFX.replace("##FX-DLL##", FormatIfNone(EffectInfo[i][j]['eDLL'],''))                        sOutFX = sOutFX.replace("##FX-TYPE##", FormatIfNone(EffectInfo[i][j]['eType'],''))                        sOutFX = sOutFX.replace("##FX-ACTIVE##", FormatIfFalse(EffectInfo[i][j]['eBypass'], "Active"))                        sOutTrackHeader = sOutTrackHeader + sOutFX                    sOutTrack = sOutTrackHeader + sOutTrackFooter                #end EFFECTS                                #----ITEMS----                iPosItmStart = 0                iPosItmStart = sOutTrack[iPosItmStart:].find(TAG_ITEM_START)                if (iPosItmStart > -1) :                    sOutTrackHeader = sOutTrack[:iPosItmStart]                    iPosItmStart = iPosItmStart + len(TAG_ITEM_START)                           iPosItmEnd = sOutTrack[iPosItmStart:].find(TAG_ITEM_END)                    if (iPosItmEnd > -1) :                        iPosItmEnd = iPosItmEnd + iPosItmStart                        sInItm = sOutTrack[iPosItmStart:iPosItmEnd]                        iPosItmEnd = iPosItmEnd + len(TAG_ITEM_END)                        sOutTrackFooter = sOutTrack[iPosItmEnd:]                    else :                        sInItm = ''                        sOutTrackFooter = sOutTrack[iPosItmStart:]                                    #Loop through all the items                    for j in range(TrackInfo[i]['tItemCount']) :                        sOutItm = sInItm                        sOutItm = sOutItm.replace("##ITEM-NUM##", '%d' % (j+1))                        sOutItm = sOutItm.replace("##ITEM-NAME##", ItemInfo[i][j]['iName'])                        sOutItm = sOutItm.replace("##ITEM-POS##", FormatSeconds(ItemInfo[i][j]['iPosition']))                        sOutItm = sOutItm.replace("##ITEM-LEN##", FormatSeconds(ItemInfo[i][j]['iLength']))                        sOutItm = sOutItm.replace("##ITEM-GROUP##", '%d' % ItemInfo[i][j]['iGroup'])                        sOutItm = sOutItm.replace("##ITEM-MUTE##", FormatIfTrue(ItemInfo[i][j]['iMute'], "Mute"))                        sOutItm = sOutItm.replace("##ITEM-VOLUME##", FormatVol(ItemInfo[i][j]['iVolume']))                        sOutItm = sOutItm.replace("##ITEM-PAN##", FormatPan(ItemInfo[i][j]['iPan']))                                           sOutTrackHeader = sOutTrackHeader + sOutItm                    sOutTrack = sOutTrackHeader + sOutTrackFooter                #end ITEMS                                    #----SENDS----                iPosSndStart = 0                iPosSndStart = sOutTrack[iPosSndStart:].find(TAG_SEND_START)                if (iPosSndStart > -1) :                    sOutTrackHeader = sOutTrack[:iPosSndStart]                    iPosSndStart = iPosSndStart + len(TAG_SEND_START)                           iPosSndEnd = sOutTrack[iPosSndStart:].find(TAG_SEND_END)                    if (iPosSndEnd > -1) :                        iPosSndEnd = iPosSndEnd + iPosSndStart                        sInSnd = sOutTrack[iPosSndStart:iPosSndEnd]                        iPosSndEnd = iPosSndEnd + len(TAG_SEND_END)                        sOutTrackFooter = sOutTrack[iPosSndEnd:]                    else :                        sInSnd = ''                        sOutTrackFooter = sOutTrack[iPosSndEnd:]                                    #Loop through all the sends                    k = -1                    for j in range(TrackInfo[i]['tSendRcvCount']) :                        sOutSnd = sInSnd                        if SendRcvInfo[i][k]['sSendRcv'] == "S" :                            k = k + 1                            sOutSnd = sOutSnd.replace("##SEND-NUM##", '%d' % (k+1))                            sOutSnd = sOutSnd.replace("##SEND-TRACK-NUM##", str(SendRcvInfo[i][j]['sSendTrack']+1))                            sOutSnd = sOutSnd.replace("##SEND-TRACK-NAME##", TrackInfo[SendRcvInfo[i][j]['sSendTrack']]['tName'])                            sOutSnd = sOutSnd.replace("##SEND-MUTE##", FormatIfTrue(SendRcvInfo[i][j]['sMute'], "Mute"))                            sOutSnd = sOutSnd.replace("##SEND-VOLUME##", FormatVol(SendRcvInfo[i][j]['sVolume']))                            sOutSnd = sOutSnd.replace("##SEND-PAN##", FormatPan(SendRcvInfo[i][j]['sPan']))                            sOutTrackHeader = sOutTrackHeader + sOutSnd                      sOutTrack = sOutTrackHeader + sOutTrackFooter                #end Sends                                                #----RECEIVES----                iPosRcvStart = 0                iPosRcvStart = sOutTrack[iPosRcvStart:].find(TAG_RECEIVE_START)                if (iPosRcvStart > -1) :                    sOutTrackHeader = sOutTrack[:iPosRcvStart]                    iPosRcvStart = iPosRcvStart + len(TAG_RECEIVE_START)                           iPosRcvEnd = sOutTrack[iPosRcvStart:].find(TAG_RECEIVE_END)                    if (iPosRcvEnd > -1) :                        iPosRcvEnd = iPosRcvEnd + iPosRcvStart                        sInRcv = sOutTrack[iPosRcvStart:iPosRcvEnd]                        iPosRcvEnd = iPosRcvEnd + len(TAG_RECEIVE_END)                        sOutTrackFooter = sOutTrack[iPosRcvEnd:]                    else:                        sInRvc = ''                        sOutTrackFooter = sOutTrack[iPosRcvEnd:]                                    #Loop through all the sends                    k = -1                    for j in range(TrackInfo[i]['tSendRcvCount']) :                        k = k + 1                        sOutRcv = sInRcv                        if SendRcvInfo[i][k]['sSendRcv'] == "R" :                            sOutRcv = sOutRcv.replace("##RCV-NUM##", '%d' % (k+1))                            sOutRcv = sOutRcv.replace("##RCV-TRACK-NUM##", str(SendRcvInfo[i][j]['sSendTrack']))                            sOutRcv = sOutRcv.replace("##RCV-TRACK-NAME##", TrackInfo[SendRcvInfo[i][j]['sSendTrack']-1]['tName'])                            sOutRcv = sOutRcv.replace("##RCV-MUTE##", FormatIfTrue(SendRcvInfo[i][j]['sMute'], "Mute"))                            sOutRcv = sOutRcv.replace("##RCV-VOLUME##", FormatVol(SendRcvInfo[i][j]['sVolume']))                            sOutRcv = sOutRcv.replace("##RCV-PAN##", FormatPan(SendRcvInfo[i][j]['sPan']))                            sOutTrackHeader = sOutTrackHeader + sOutRcv                    sOutTrack = sOutTrackHeader + sOutTrackFooter                #end Receives                sOutHeader = sOutHeader + sOutTrack        #end if iPos2 > -1    else:        sOutHeader = sOutPage        sOutFooter = ""    #End if iPos > -1        sOutPage = sOutHeader + sOutFooter    ret = WriteFile(sOutPage, sFilename)    if ret:        webbrowser.open_new(sFilename)    if parent == None:        root.destroy()    return ret    #end def formatprojectfiledef WriteFile(sOutstr, sFilename):    try:        saveFile = open(sFilename, 'wb')        if python2 :            saveFile.write(bytes(sOutstr))        else :            saveFile.write(bytes(sOutstr,encoding='ascii'))        saveFile.close()        return True    except IOError:        tkMessageBox.showerror(title="Error writing Document File",                               message="Could not open and write: " + sFilename)        return False    #end def WriteFiledef FormatVol(v):    l = 0.0    c = 0.0        #volume value has  a range of -71db to + 24db.  Value in V ranges from 0 to 16 where 1 = +0db        if (v == 0) :        sFormatVol = "-inf"    else :        c = 24.0 / log(16)        l = c * log(v)        sFormatVol = ('%+6.2f' % l) + "db"    return sFormatVol    #End def FormatVoldef FormatPan(v):    if v == 0 :        sFormatPan = "C"    elif v < 0 :        sFormatPan = "L " + '%d' % round(-v*100) + "%"    else :        sFormatPan = "R " + '%d' % round(v*100) + "%"    return sFormatPan    #End def FormatPandef FormatIfTrue(b, s) :    if b == True :        sFormatIfTrue = s    else :        sFormatIfTrue = ""    return sFormatIfTrue    #End def FormatIfTruedef FormatIfFalse(b, s) :    if b == False :        sFormatIfFalse = s    else :        sFormatIfFalse = ""    return sFormatIfFalse    #End def FormatIfFalsedef FormatIfNone(b, s) :    if b == None :        sFormatIfNone = s    else :        sFormatIfNone = b    return sFormatIfNone    #End def FormatIfNonedef GetSeparator() :    if dfseparators[subDocDefaults[defSeparator]] :        sGetSeparator = dfseparators[subDocDefaults[defSeparator]]    else :        sGetSeparator = ", "    return sGetSeparator    #End def GetSeparatordef GetFXList(iTrack) :    sOut = ""    sSep = GetSeparator()        iCount = TrackInfo[iTrack]['tEffectCount']    for i in range(iCount) :        if i > 0 : sOut = sOut + sSep        sOut = sOut + EffectInfo[iTrack][i]['eName']    return sOut    #End def GetFXListdef GetItemList(iTrack) :    sOut = ""    sSep = GetSeparator()        iCount = TrackInfo[iTrack]['tItemCount']    for i in range(iCount) :        if i > 0 : sOut = sOut + sSep        sOut = sOut + ItemInfo[iTrack][i]['iName']    return sOut    #End def GetItemListdef GetSendList(iTrack) :    sOut = ""    sSep = GetSeparator()        iCount = TrackInfo[iTrack]['tSendRcvCount']    for i in range(iCount) :        j = 0        if SendRcvInfo[iTrack][i]['sSendRcv'] == "S" :            j = j + 1            if i > 0 and len(sOut) > 0 : sOut = sOut + sSep            sOut = sOut + "Trk " + str(SendRcvInfo[iTrack][i]['sSendTrack']+1) + ":" \                   + TrackInfo[SendRcvInfo[iTrack][i]['sSendTrack']]['tName']    return sOut    #End def GetSendListdef GetRcvList(iTrack) :    sOut = ""    sSep = GetSeparator()        iCount = TrackInfo[iTrack]['tSendRcvCount']    for i in range(iCount) :        j = 0        if SendRcvInfo[iTrack][i]['sSendRcv'] == "R" :            j = j + 1            if i > 0 and len(sOut) > 0 : sOut = sOut + sSep            sOut = sOut + "Trk " + str(SendRcvInfo[iTrack][i]['sSendTrack']) + ":" \                   + TrackInfo[SendRcvInfo[iTrack][i]['sSendTrack']-1]['tName']    return sOut    #End def GetRcvListdef FormatSeconds(v) :    # item positions are defined as seconds on the time line    # convert them to hh:mm:ss        h = int(v / 3600)    s = int(v - (h*3600))    m = int(s / 60)    s = s - (m*60)        return '%02d:%02d:%02d' % (h,m,s)    #End FormatSeconds#test itif __name__ == '__main__':    #testfile = 'C:\Dropbox\Python\ReaperDocSource\BradSucks_MakingMeNervous.rpp'    testfile = 'C:\Dropbox\Python\ReaperDocSource\Song with Sends.rpp'    outfile = 'C:\Dropbox\Python\ReaperDocSource\BradSucks_test.html'    #templatefile = 'C:\\Dropbox\\Python\ReaperDoc2\\templates\\default_template.htm'    #templatefile = 'C:\\Dropbox\\Python\ReaperDoc2\\templates\\list_template.htm'    templatefile = 'C:\\Dropbox\\Python\ReaperDoc2\\templates\\more_details_template.htm'    readprojectfile(testfile)    defaultfile = os.path.dirname(os.path.abspath(inspect.getfile(\        inspect.currentframe())))+'\\'+'ReaperDoc2.ini'    subDocDefaults = get_create_defaults(defaultfile)    print('entering formatprojectfile')    formatprojectfile(outfile,templatefile,subDocDefaults)