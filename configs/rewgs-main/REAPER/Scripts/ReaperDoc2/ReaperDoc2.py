# ReaperDoc2.py - ReaperDoc2 main module# Copyright 2012 - Cy Ball## This file is part of ReaperDoc2.## ReaperDoc2 is free software: you can redistribute it and/or modify# it as you please.## ReaperDoc2 is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.## A cross-platform python script to extract data from a REAPER .rpp project file and # display/print it.# Modelled after ReaperDoc by Gregg Reno which was written in Visual Basic.# HOW TO USE:# You must have the Python 3.x interpreter installed on your system.  It is a free program# from http://www.python.org for many different platforms (Windows, Mac, etc.) and# comes with Linux. If you already have it, you may need to upgrade to 3.x# When you run it, the Help menu item will explain how to setup and execute the program.# PLATFORM: This is intended to run on any platform (Windows, Mac, Linux).#This attempts to work in python version 2.7 and version 3.2# HISTORY:# 0.2 beta - started trying to remain compatible between#            python versions 2.7 - 3.2#are we in Reaper?try :    from reaper_python import *    __reaper__ = Trueexcept ImportError :    __reaper__ = False#--- author's constants ---__version__ = '1.0'__versionDate__ = '14 Dec 2012'__title__ = 'ReaperDoc 2'xp = 5yp = 10spaceht = 15labelwt = 20entrywt = 60txtrpp = 'Reaper Project File: 'txtoutfile = 'Output File: 'txttemplate = 'Conversion Template: 'import string, sysimport webbrowser# for compatibility between version 2.7 and version 3.2try:    import tkinter as tk    from tkinter.constants import BOTH    from tkinter import messagebox as tkMessageBox    from tkinter import filedialog as tkFileDialogexcept ImportError:    import Tkinter as tk    from Tkconstants import BOTH    import tkMessageBox    import tkFileDialogfrom readocAbout import AboutDialogfrom readocPrefs import PreferenceDialogimport readocDefaults as rdDefimport readocSubs as rdSubsimport os, inspect, tracebackroot, rpp_frame, menu_frame, output_frame, template_frame, \      status_frame, button_frame = (None, None, None, None, None, None, None)file_opt, varRpp, varOutput, varTemplate, \          varStatus = (None, None, None, None, None)def file_menu() :    file_btn = tk.Menubutton(menu_frame, text='File', underline=0)          #create a menu object tied    file_btn.pack(side=tk.LEFT, padx="2m")    file_btn.menu = tk.Menu(file_btn)    file_btn.menu.add_command(label='Preferences',    #add first menu item                             underline=0,       #keyboard shortcut = "P"                         command=getPrefs)  #what to do when called    file_btn.menu.add('separator')    file_btn.menu.add_command(label='Exit',underline=0,command=btn_exit)    file_btn['menu'] = file_btn.menu    return file_btn#end def file_menudef help_menu() :    help_btn = tk.Menubutton(menu_frame, text='Help', underline=0,)    help_btn.pack(side=tk.LEFT, padx="2m")    help_btn.menu = tk.Menu(help_btn)    help_btn.menu.add_command(label='Help',    #add first menu item                         underline=0,       #keyboard shortcut = "H"                         command=getHelp)  #what to do when called    help_btn.menu.add_command(label='About',    #add first menu item                         underline=0,       #keyboard shortcut = "A"                         command=getAbout)  #what to do when called    help_btn['menu'] = help_btn.menu    return help_btn#end def help_menudef btn_exit():    global root, varStatus, varRpp, varOutput, varTemplate    varStatus.set('Exiting')    #write out defaults    if varRpp.get():        rdDef.docDefaults[rdDef.defProject] = varRpp.get()    if varOutput.get():        rdDef.docDefaults[rdDef.defOutput] = varOutput.get()    if varTemplate.get():        rdDef.docDefaults[rdDef.defTemplate] = varTemplate.get()    rdDef.write_dictionary(defaultfile,rdDef.docDefaults)        root.destroy()#end def btn_exitdef apply():    global root, varStatus, varRpp, varOutput, varTemplate    #write out defaults    if varRpp.get():        rdDef.docDefaults[rdDef.defProject] = varRpp.get()    if varOutput.get():        rdDef.docDefaults[rdDef.defOutput] = varOutput.get()    if varTemplate.get():        rdDef.docDefaults[rdDef.defTemplate] = varTemplate.get()    rdDef.write_dictionary(defaultfile,rdDef.docDefaults)    rdDef.write_dictionary(defaultfile,rdDef.docDefaults)    rdSubs.readprojectfile(rdDef.docDefaults[rdDef.defProject])    rdSubs.formatprojectfile(rdDef.docDefaults[rdDef.defOutput],                             rdDef.docDefaults[rdDef.defTemplate],                             rdDef.docDefaults,root)    return#end def applydef validate() :    ret = True    if not varRpp.get():        tkMessageBox.showerror(title='File define error', \                               message='A Reaper project file must be selected.')        ret = False    if not varOutput.get():        tkMessageBox.showerror(title='File define error', \                               message='An output file must be selected.')        ret = False    if not varTemplate.get():        tkMessageBox.showerror(title='File define error', \                               message='A template file must be selected.')        ret = False    return ret#end def validatedef btn_ok():    global varStatus    varStatus.set('Validating')    if validate() is False :        #info_frame.initial_focus.focus_set() # put focus back        varStatus.set('Validation Failure')        return    varStatus.set('Processing')    info_frame.update_idletasks()    apply()    varStatus.set('Processing Complete')#end def btn_ok    def getPrefs():    global varStatus    varStatus.set('')    rdDef.write_dictionary(defaultfile,rdDef.docDefaults)    PreferenceDialog(parent=root)#end def self.Prefsdef getHelp():   # lazy way, let browser and html design do it.    global varStatus    varStatus.set('')    webbrowser.open_new("reaperdoc2.htm")#end def self.Helpdef getAbout():	    global varStatus    varStatus.set('')    AboutDialog(parent=root, version=__version__,                version_date=__versionDate__)#end def self.Aboutdef askRppName():    global file_opt, varStatus, varRpp    varStatus.set('')    #set options    file_opt['defaultextension'] = '.rpp'    file_opt['filetypes'] = [('Reaper Projects', '.rpp')]    if __reaper__ :        path = RPR_GetProjectPath("", 512)        file_opt['initialdir'] = path[0]    else :        if rdDef.defProject in rdDef.docDefaults:            if rdDef.docDefaults[rdDef.defProject] is not None :                file_opt['initialdir'] = os.path.dirname( \                    rdDef.docDefaults[rdDef.defProject])            else :                file_opt['initialdir'] = os.getcwd()        else:            file_opt['initialdir'] = os.getcwd()    file_opt['initialfile'] = None    file_opt['parent'] = root    file_opt['title'] = 'Find Reaper Project File'    # get filename    tkfile = tkFileDialog.askopenfilename(**file_opt)    if tkfile :        varRpp.set(tkfile)        rdDef.docDefaults[rdDef.defProject] = tkfile#end def self.askRppNamedef askOutputName():    global file_opt, varStatus, varOutput    varStatus.set('')    #set options    file_opt['defaultextension'] = '.html'    file_opt['filetypes'] = [('All files', '.*'),                                  ('Reaper HTML Documentation', '.html'),                                  ('HTM Template', '.htm'),                                  ('Text Template', '.txt')]    if __reaper__ :        path = RPR_GetProjectPath("", 512)        file_opt['initialdir'] = path[0]    else :        if rdDef.defProject in rdDef.docDefaults:            if rdDef.docDefaults[rdDef.defProject] is not None :                file_opt['initialdir'] = os.path.dirname( \                    rdDef.docDefaults[rdDef.defProject])            else :                file_opt['initialdir'] = os.getcwd()        else:            file_opt['initialdir'] = os.getcwd()    file_opt['initialfile'] = None    file_opt['parent'] = root    file_opt['title'] = 'Name Reaper Output HTML File'    # get filename    tkfile = tkFileDialog.asksaveasfilename(**file_opt)    if tkfile :        varOutput.set(tkfile)        rdDef.docDefaults[rdDef.defOutput] = tkfile#end def self.askOutputNamedef askTemplateName():    global file_opt, varStatus, varTemplate    varStatus.set('')    #set options    file_opt['defaultextension'] = '.html'    file_opt['filetypes'] = [('All files', '.*'),                                  ('Reaper HTML Template', '.htm*'),                                  ('HTM Template', '.htm'),                                  ('HTML Template', '.html'),                                  ('Text Template', '.txt')]    # start looking in installation directory    file_opt['initialdir'] = sys.path[0]+'\\templates'    file_opt['parent'] = root    file_opt['title'] = 'Select Reaper Template File'    # get filename    tkfile = tkFileDialog.askopenfilename(**file_opt)    if tkfile :        varTemplate.set(tkfile)        rdDef.docDefaults[rdDef.defTemplate] = tkfile#end def self.askTemplateNamedef buttonbox():    # add standard button box.    global info_frame    box = tk.Frame(root, borderwidth=1)    box.grid(row=10, column=0, padx=2, pady=1)    w = tk.Button(box, text="Create File", width=10, command=btn_ok, default='active')    w.grid(row=0, column=0, padx=5, pady=5)    w = tk.Button(box, text="Exit", width=10, command=btn_exit)    w.grid(row=0, column=1, padx=5, pady=5)    info_frame.bind("<Return>", btn_ok)#end def buttonbox    def init_vars() :    global __reaper__, defaultfile, file_opt    global varRpp, varOutput, varTemplate, varStatus    #get defaults from ini file    defaultfile = os.path.abspath(sys.path[0])+'\\'+'ReaperDoc2.ini'    rdDef.docDefaults = rdDef.get_create_defaults(defaultfile)        file_opt = options = {}  #file dialog options    try :        varRpp = tk.StringVar(value=rdDef.docDefaults[rdDef.defProject])    except :        varRpp = tk.StringVar(value='')    try :        varOutput = tk.StringVar(value=rdDef.docDefaults[rdDef.defOutput])    except :        varOutput = tk.StringVar(value='')    try :        varTemplate = tk.StringVar(value=rdDef.docDefaults[rdDef.defTemplate])    except :        varTemplate = tk.StringVar(value=os.path.abspath(sys.path[0])+'\\'+'templates\\default_template.htm')    varStatus = tk.StringVar()#end def init_vars    def raise_above_all(window): # forces window to top of stack    window.attributes('-topmost', 1)    window.attributes('-topmost', 0)#end def raise_above_all    def main() :    global root, menu_frame, rpp_frame, output_frame, template_frame    global varRpp, varOutput, varTemplate, varStatus    global __reaper__, status_frame, info_frame    if __reaper__ :        root = tk.Tk(baseName="")    else:        root = tk.Tk()    root.title('ReaperDoc 2')    init_vars()    #-- Create the menu frame, and add menus to the menu frame    menu_frame = tk.Frame(root)    menu_frame.grid(row=0, column=0,sticky=tk.NW)    menu_frame.tk_menuBar(file_menu(), help_menu())    #-- Create frame containing all the other stuff    info_frame = tk.Frame(root)    info_frame.grid(row=2, column=0)    #-- Create RPP frame    rpp_frame = tk.Frame(info_frame, borderwidth=1)    rpp_frame.grid(row=0, column=0, padx=2, pady=1)    lblrpp = tk.Label(rpp_frame, text=txtrpp, \                      width=labelwt).grid(row=0, column=0, padx=xp, pady=yp)    entRppVal = tk.Entry(rpp_frame, textvariable=varRpp, width=entrywt,                       relief='sunken', background='WHITE')    entRppVal.grid(row=0, column=1, padx=xp, pady=yp)        btnRpp = tk.Button(rpp_frame, text='Browse', command=askRppName)    btnRpp.grid(row=0, column=2, padx=xp, pady=yp)    #-- Create Output File frame    output_frame = tk.Frame(info_frame, borderwidth=1)    output_frame.grid(row=2, column=0, padx=2, pady=1)    lblOutfile = tk.Label(output_frame, text=txtoutfile, \                          width=labelwt).grid(row=0, column=0, padx=xp, pady=yp)    entOutfile = tk.Entry(output_frame, textvariable=varOutput, width=entrywt,                       relief='sunken', background='WHITE')    entOutfile.grid(row=0, column=1, padx=xp, pady=yp)        btnOutfile = tk.Button(output_frame, text='Browse', command=askOutputName)    btnOutfile.grid(row=0, column=2, padx=xp, pady=yp)    #-- Create Template File frame    template_frame = tk.Frame(info_frame, borderwidth=1)    template_frame.grid(row=4, column=0, padx=2, pady=1)    lblTemplate = tk.Label(template_frame, text=txttemplate, \                           width=labelwt).grid(row=0, column=0, padx=xp, pady=yp)    entTemplate = tk.Entry(template_frame, textvariable=varTemplate, width=entrywt,                       relief='sunken', background='WHITE')    entTemplate.grid(row=0, column=1, padx=xp, pady=yp)        btnTemplate = tk.Button(template_frame, text='Browse', command=askTemplateName)    btnTemplate.grid(row=0, column=2, padx=xp, pady=yp)    #-- Create Status Line frame    status_frame = tk.Frame(info_frame, borderwidth=1)    status_frame.grid(row=6, column=0, padx=2, pady=1)    lblStat = tk.Label(status_frame, text='Status:', \                       width=labelwt).grid(row=0, column=0, padx=xp, pady=yp)    entStatus = tk.Label(status_frame, textvariable=varStatus, width=entrywt,                       relief='sunken')    entStatus.grid(row=0, column=1, padx=xp, pady=yp)    buttonbox()    # build buttons    #-- Finally, let's actually do all that stuff created above    root.lift()    raise_above_all(root)    root.mainloop()#end def main#--- now let's do it ---if __name__=='__main__':    try:        main()    except:        traceback.print_exc()