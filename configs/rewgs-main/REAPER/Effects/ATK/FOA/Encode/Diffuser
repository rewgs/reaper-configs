/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Diffuser
  Frequency diffusion mono encoder.
---------------------------------------------------------------------
*/

desc: ATK FOA Encode Diffuser
// Frequency diffusion mono encoder


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:M

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:3<0,5,1{256, 512, 1024, 2048, 4096, 8192}>Kernel size
slider2:3<0,5,1{0: Low, 1, 2, 3, 4, 5: High}> Amount of phase dispersion



/**********************************************************
Initialisation
**********************************************************/
@init

// Allocate slots for filenames:
mFilename = 1;

// Allocate buffer and block locations...

// ...for the impulse response kernel,
mImpulseBuffer      = 131072 * 1;

// ..the FFT-transformed kernel,
mKernelWX           = 131072 * 2;
mKernelYZ           = 131072 * 3;

// ...and for two blocks of running samples to be convolved:

// mBlockCurrentW,... is the most recently convolved block
mBlockCurrentWX     = 131072 * 4;
mBlockCurrentYZ     = 131072 * 5;

// mBlockLastAndNextW,... is the previously used block. It will also be the next block
mBlockLastAndNextWX = 131072 * 6;
mBlockLastAndNextYZ = 131072 * 7;

// FFT- and convolution-related variables
mPreviousKernelSliderValue = -1;
mPhaseDispersion           = -1;
mFftSize                   = -1;
mKernelSize                = -1;
mFftNewRequired            =  1;



/********************************************************************
Prepare a new kernel from an impulse buffer
********************************************************************/
function prepareKernel(anImpulseBuffer, aKernel, aKernelSize, anFftSize, aChannelOffset) local(i, i2, i4, lInvFftSize)
(
  // We do not need to resample, as IR in diffuser encoding does not depend on sample rate
  
  // Copy two channels from IR to the kernel buffer
  // Samples are inter-leaved (L,R,L,R, .... or 1,2,3,4,1,2,3,4,...)
  // FFT and convolution operate on complex numbers
  i2 = 0;
  i4 = 0;
  loop(aKernelSize,
    aKernel[i2]     = anImpulseBuffer[i4 + aChannelOffset];
    aKernel[i2 + 1] = anImpulseBuffer[i4 + aChannelOffset + 1];
    i2 += 2;
    i4 += 4;
  );
  
  /* FFT Size is twice that of the kernel, and we need to pad with zeros.
   Additionally we do complex FFT and hence operate on stereo buffers.
   */
  memset(aKernel + (aKernelSize*2), 0.0, aKernelSize*2);
  
  // Do FFT of the impulse response
  fft(aKernel, mFftSize);
  
  // Scale kernel to compensate for the size of the FFT window
  lInvFftSize = 1 / anFftSize;
  i=0;
  loop(anFftSize*2, 
    aKernel[i] *= lInvFftSize; 
    i += 1; 
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

// Has kernel size changed?
((mPreviousKernelSliderValue != slider1) || (mPhaseDispersion != slider2)) ?
(
  mPreviousKernelSliderValue = slider1;
  mPhaseDispersion    = slider2;
  
  // Get new kernel size
  mKernelSize = 256;
  loop (slider1,
    mKernelSize = mKernelSize * 2;
  );
    
  // Set filename of impulse response file
  sprintf(mFilename, "ATK/kernels/FOA/encoders/diffuse/None/%i/%04d/diffuse.wav", mKernelSize, mPhaseDispersion);
  
  // Cupy impulse (4 channels) from file to buffer
  readKernelImpulseFromFile(mFilename, mImpulseBuffer);
  
  // Set flag that FFT need to be recalculated
  mFftNewRequired = 1;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

// If kernel size has changed, we need to prepare a new kernel
mFftNewRequired ? (
  
  mFftSize = 2 * mKernelSize;
  
  // What is chunksize and chunksize2 used for?
  // If mKernelSize = 256 and mFftSize = 512, chunksize = 512 - 256 - 1 = 255 and chunksize2 = 510
  chunksize  = mFftSize - mKernelSize - 1;
  chunksize2 = chunksize * 2;
  
  // Do FFT on the impulse responses
  prepareKernel(mImpulseBuffer, mKernelWX, mKernelSize, mFftSize, 0);
  prepareKernel(mImpulseBuffer, mKernelYZ, mKernelSize, mFftSize, 2);
  
  // Reset current write/read position within the blocks
  mBufferPosition = 0;
  
  // Update delay compensation
  pdc_delay = ((1.5 * mKernelSize)|0) - 2;
  
  // Delay compensation affects channels 1-3
  pdc_bot_ch=0;
  pdc_top_ch=4;
  
  // Convolution kernel is now up to date
  mFftNewRequired = 0; 
);


/**********************************************************
Calculate audio sample

Functions with arguments do not work within the @sample block as of Reaper 4.71,
This limits how DRY we're able to make this section
**********************************************************/
@sample

// If we're past the chunksize, it's time to convolve
mBufferPosition >= chunksize ? 
(
  /***** Convolve WX *****/
  
  // Swap which block is last and current
  mTempBlock          = mBlockLastAndNextWX;
  mBlockLastAndNextWX = mBlockCurrentWX;
  mBlockCurrentWX     = mTempBlock;
  
  // Pad the tail of the buffer to zero
  memset(mBlockCurrentWX+chunksize*2, 0, (mFftSize-chunksize)*2);
  
  // The actual convolution
  fft(mBlockCurrentWX, mFftSize);
  convolve_c(mBlockCurrentWX, mKernelWX, mFftSize);
  ifft(mBlockCurrentWX, mFftSize);
  
  
  /***** Convolve YZ *****/
  
  // Swap which block is last and current
  mTempBlock          = mBlockLastAndNextYZ;
  mBlockLastAndNextYZ = mBlockCurrentYZ;
  mBlockCurrentYZ     = mTempBlock;
  
  // Pad the tail of the buffer to zero
  memset(mBlockCurrentYZ+chunksize*2, 0, (mFftSize-chunksize)*2);
  
  // The actual convolution
  fft(mBlockCurrentYZ, mFftSize);
  convolve_c(mBlockCurrentYZ, mKernelYZ, mFftSize);
  ifft(mBlockCurrentYZ, mFftSize);
  
  
  // Current write/read position within the blocks starts counting from 0 again
  mBufferPosition=0;
);


mBufferPosition2 = mBufferPosition*2;


// Buffer incoming audio as real value, set imaginary value to zero

// WX
mBlockLastAndNextWX[mBufferPosition2]   = spl0;
mBlockLastAndNextWX[mBufferPosition2+1] = 0;

// YZ
mBlockLastAndNextYZ[mBufferPosition2]   = spl0;
mBlockLastAndNextYZ[mBufferPosition2+1] = 0;


// Copy convolved sample values to output
spl0 = mBlockCurrentWX[mBufferPosition2];
spl1 = mBlockCurrentWX[mBufferPosition2+1];

spl2 = mBlockCurrentYZ[mBufferPosition2];
spl3 = mBlockCurrentYZ[mBufferPosition2+1];


// Add the overlap part (In this plugin we will always be overlapping)
mBufferPosition < mFftSize-chunksize ? 
(
  spl0 += mBlockLastAndNextWX[chunksize2+mBufferPosition2];
  spl1 += mBlockLastAndNextWX[chunksize2+mBufferPosition2+1];
  
  spl2 += mBlockLastAndNextYZ[chunksize2+mBufferPosition2];
  spl3 += mBlockLastAndNextYZ[chunksize2+mBufferPosition2+1];
);


// Increment buffer position
mBufferPosition += 1;
