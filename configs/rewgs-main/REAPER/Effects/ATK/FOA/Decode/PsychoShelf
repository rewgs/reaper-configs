/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: psychoShelf
  Apply psychoacoustic shelf filtering to a first order ambisonic signal (B-format).
  
---------------------------------------------------------------------
*/

desc: ATK FOA Decode PsycoShelf 
// Psychoacoustic shelf filter

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:0<0,1,1{2D Decoder, 3D Decoder}>Decoding Mode
slider2:400<200,700,1>Shelf filter corner frequency (Hz)


/**********************************************************
Initialisation
**********************************************************/
@init

// Clear previous samples
m_UY1w = 0.0;
m_UY2w = 0.0;
m_UY1x = 0.0;
m_UY2x = 0.0;
m_UY1y = 0.0;
m_UY2y = 0.0;
m_UY1z = 0.0;
m_UY2z = 0.0;

/**********************************************************
Updated slider value:
**********************************************************/
@slider

mode     = slider1; 
mFreq = slider2;

(mode == 0) ?
(
  // 2D decoding
  mK0   = sqrt(3./2.);
  mK1   = sqrt(3.);
) :
(
  // 3D decoding
  mK0   = sqrt(2.);
  mK1   = sqrt(2/3);
);


/**********************************************************
Preprocessing prior to audio vector processing.
We do not expect parameters to be changed dynamically 
in performance, so code can be optimised by not
implementing linear interpolation to new values.
**********************************************************/
@block

inverseSamplesblock = 1. / samplesblock;

wc = tan($pi * mFreq * inverseSamplesblock);
c = (wc - 1.0) / (wc + 1.0);

// 0 order coefficients
a0w = (((1.0 - mK0) * 0.25) * (1.0 + (c*c))) + (((1.0 + mK0) * 0.5) * c);
a1w = ((1.0 - mK0) * c) + (((1.0 + mK0) * 0.5) * (1.0 + (c*c)));
a2w = a0w;
b1w = -2.0 * c;
b2w = -c * c;

// 1st order coefficients
a0xyz = (((1.0 - mK1) * 0.25) * (1.0 + (c*c))) + (((1.0 + mK1) * 0.5) * c);
a1xyz = ((1.0 - mK1) * c) + (((1.0 + mK1) * 0.5) * (1.0 + (c*c)));
a2xyz = a0xyz;
b1xyz = -2.0 * c;
b2xyz = -c * c;



/**********************************************************
Calculate audio sample
**********************************************************/
@sample

wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;


// Prevent potential blow up if track is 2 channels only and spl2 and spl3 are un-ininitiated.
(num_ch == 2) ? (
  yIn = 0.;
  zIn = 0.;
);

// filter 0 order
y0w = wIn + b1w * y1w + b2w * y2w;
spl0 = a0w * y0w + a1w * y1w + a2w * y2w;
y2w = y1w;
y1w = y0w;

// filter 1st order
y0x = xIn + b1xyz * y1x + b2xyz * y2x;
spl1 = a0xyz * y0x + a1xyz * y1x + a2xyz * y2x;
y2x = y1x;
y1x = y0x;

y0y = yIn + b1xyz * y1y + b2xyz * y2y;
spl2 = a0xyz * y0y + a1xyz * y1y + a2xyz * y2y;
y2y = y1y;
y1y = y0y;

y0z = zIn + b1xyz * y1z + b2xyz * y2z;
spl3 = a0xyz * y0z + a1xyz * y1z + a2xyz * y2z;
y2z = y1z;
y1z = y0z;
