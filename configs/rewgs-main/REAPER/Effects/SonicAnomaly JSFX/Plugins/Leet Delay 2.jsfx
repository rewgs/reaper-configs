desc:Leet Delay 2
version: 1.0
author: SonicAnomaly
changelog: init
provides: leet_delay_gfx/*

/*****************************************************
Copyright (C) 2016 Stige T.
License: http://jsplugins.supermaailma.net/license.php
*****************************************************/

EffectName: Leet Delay 2
VendorString: Sonic Anomaly
VendorVersion: 1000
UniqueId: 'LTD2'

slider1:4<0,23,1{0.25,0.33,0.50,0.66,0.75,1.00,1.25,1.33,1.50,1.66,1.75,2.00,2.25,2.33,2.50,2.66,2.75,3.00,3.33,3.25,3.50,3.66,3.75,4.00}>-Delay [1/4 Notes]
slider2:500<0,4000,10>-Delay [ms]
slider3:0<0,1,1>-Tempo Delay [Off/On]
slider4:10<0,100,1>-Feedback [%]
slider5:2000<400,4000,10>-Color [Hz]
slider6:0.05<0,1,0.01>-Resonance
slider7:1<0,1,0.01>-Color Mix
slider8:0<0,1,1>-Ping Pong [Off/On]

slider10:0<-40,10,1>-Dry [dB]
slider11:0<-40,10,1>-Wet [dB]

filename:0,leet_delay_gfx/knob_sm.png
filename:1,leet_delay_gfx/bg.png
filename:2,leet_delay_gfx/knob_but.png

resource:0,1,2

@init

!"#define VAL(A) (A)" "//";

buildStr = "build 170206";

maxDelay = srate * 6;
hpfreq = 1-exp(-2*$pi*150/srate);
att = 0;
rel = exp(-1/(srate*0.05));
fadeOut = exp(-1/(srate*3));
env_inertia = exp(-1/(srate*0.02));
harmonics = 2;
delayDrift = srate * 0.00023;
weight = 1-exp(-1/(300 / 1000 * srate));

mulTbl = 1000000;
mulTbl[0] = 0.25;
mulTbl[1] = 0.33;
mulTbl[2] = 0.5;
mulTbl[3] = 0.66;
mulTbl[4] = 0.75;
mulTbl[5] = 1;
mulTbl[6] = 1.25;
mulTbl[7] = 1.33;
mulTbl[8] = 1.5;
mulTbl[9] = 1.66;
mulTbl[10] = 1.75;
mulTbl[11] = 2;
mulTbl[12] = 2.25;
mulTbl[13] = 2.33;
mulTbl[14] = 2.5;
mulTbl[15] = 2.66;
mulTbl[16] = 2.75;
mulTbl[17] = 3;
mulTbl[18] = 3.25;
mulTbl[19] = 3.33;
mulTbl[20] = 3.5;
mulTbl[21] = 3.66;
mulTbl[22] = 3.75;
mulTbl[23] = 4;

function Interpolate(A, B, X) (
  A + ((B-A)*X);
);

function delay_init(samples,index)
instance (len,sloop,splay)
(
  len = samples > maxDelay ? maxDelay : samples;
  sloop = splay = maxDelay * index;
);

function delay(input)
instance(sindex,splay,sloop,len)
(
  sloop[sindex] = input;
  sindex > len ? sindex = 0 : sindex += 1;
  splay[sindex];
);

function SPLP_init(freq,res)
instance(f,p,k,t,t2,r) (
  f = (freq+freq) / srate;
  p = f * (1.8-0.8*f);
  k = p + p -1.0;
  t = (1.0-p) * 1.386249;
  t2 = 12.0 + t * t;
  r = res * (t2+6.0*t) / (t2-6.0*t);
);

function SPLP(input)
instance(x,y1,y2,y3,y4,oldx,oldy,oldy1,oldy2,oldy3,f,p,k,t,t2,r)
(  
  x = input - r * y4;
  y1 = x * p + oldx * p - k * y1;
  y2 = y1 * p + oldy1 * p - k * y2;
  y3 = y2 * p + oldy2 * p - k * y3;
  y4 = y3 * p + oldy3 * p - k * y4;
  y4 = y4 - ((y4*y4*y4)/6.0);
  oldx = x;
  oldy1 = y1;
  oldy2 = y2;
  oldy3 = y3;
  y4;
);

function follower(input,att,rel)
instance (env,tmp) (
  tmp = input >= tmp ? input : input + env_inertia * (tmp-input);
  (tmp > env) ? (
      env = att * (env - tmp) + tmp;
  ) : (
      env = rel * (env - tmp) + tmp;
  );
);

function InitDelays() (
  d0.delay_init(max(prm.delayTime-delayDrift,0),0);
  d1.delay_init(max(prm.delayTime+delayDrift,delayDrift*2),1);
);

function ProcessSliders() (
  prm.feedback = slider4 / 100;
  prm.delayMul = slider1;
  mulTbl = 1000000;
  prm.tempoMul = mulTbl[prm.delayMul];
  prm.delayMs = srate/(1/(slider2/1000));
  prm.freq = slider5;
  prm.reso = slider6;  
  prm.colorMul = slider7;
  prm.colorMulInv = (1-prm.colorMul);
  prm.pingpong = slider8;
  
  prm.dry = 10 ^ (slider10/20);
  prm.wet = 10 ^ (slider11/20);
  prm.temDelActive = slider3;
  attCoeff = (max(prm.feedback-0.5,0)*2)^0.01;
  prm.fbAgcAtt = exp(-1/(srate*Interpolate(0.05,0,attCoeff)));
    
  spf1.SPLP_init(prm.freq*1.1,prm.reso);
  spf2.SPLP_init(prm.freq*0.9,prm.reso);
  hpfreq = 1-exp(-2*$pi*150*(prm.colorMul+1)/srate);
  
  !prm.temDelActive ? (
    prm.delayTime = prm.delayMs;
    prm.delayTime = prm.delayMs;
    InitDelays();
  );
  
  delayFromTempo = 0;
);

@slider

s1.value = slider1;
s2.value = slider2;
s3.value = slider3;
s4.value = slider4;
s5.value = slider5;
s6.value = slider6;
s7.value = slider7;
s8.value = slider8;
s10.value = slider10;
s11.value = slider11;

ProcessSliders();

@block

prm.temDelActive && !delayFromTempo ? (
  delayFromTempo = srate / (tempo / 60);
  prm.delayTime = delayFromTempo*prm.tempoMul;
  prm.delayTime = delayFromTempo*prm.tempoMul;
  InitDelays();
);

mtrEnv = max(mtrEnv,max(abs(fb1),abs(fb2)));

@sample

norm = (rand(1) * 0.0000000001);

!prm.pingpong ? (
  in1 = spl0 + (fb1 * prm.feedback) + norm;
  in2 = spl1 + (fb2 * prm.feedback) + norm;
  
  /* Delay */
  fb1 = d0.delay(in1 * 0.962);
  fb2 = d1.delay(in2);
) : (
  in1 = spl0 + (fb2 * prm.feedback) + norm;
  in2 = spl1 + (fb1 * prm.feedback) + norm;
  
  /* Delay */
  fb2 = d1.delay(fb1 * 0.92);
  fb1 = d0.delay(in1 * 0.97);
);

/* HPF Filter */
fb1 = fb1 - ( s1 += hpfreq * ( fb1 - s1 ) );
fb2 = fb2 - ( s2 += hpfreq * ( fb2 - s2 ) );

/* Color */
fb1 = ( spf1.SPLP(fb1) * prm.colorMul) + ( fb1 * prm.colorMulInv );
fb2 = ( spf2.SPLP(fb2) * prm.colorMul) + ( fb2 * prm.colorMulInv );

/* Feedback AGC */
env = agc.follower((abs(fb1)+abs(fb2)*0.5),prm.fbAgcAtt,rel);
env > 0.001 ? (fbMod = 0.891/(env+0.5);) : (fbMod *= fadeOut;);
fb1 *= fbMod;
fb2 *= fbMod;

/* Sum */
spl0 = (-fb1 * prm.wet) + (spl0 * prm.dry);
spl1 = (fb2 * prm.wet) + (spl1 * prm.dry);

@gfx 500 480

function vert_meter_layout()
(
  this.conf.x = 428;
  this.conf.y = 40;
  this.conf.w = 20;
  this.conf.h = 300;
  this.conf.s = 0.3;
  
  !this.mtr.20 ? (
    this.mtr.1 = (1 - 0.891^this.conf.s) * this.conf.h;
    this.mtr.3 = (1 - 0.708^this.conf.s) * this.conf.h;
    this.mtr.6 = (1 - 0.501^this.conf.s) * this.conf.h;
    this.mtr.10 = (1 - 0.316^this.conf.s) * this.conf.h;
    this.mtr.15 = (1 - 0.178^this.conf.s) * this.conf.h;
    this.mtr.20 = (1 - 0.1^this.conf.s) * this.conf.h;
    this.mtr.30 = (1 - 0.0316^this.conf.s) * this.conf.h;
    this.mtr.40 = (1 - 0.01^this.conf.s) * this.conf.h;
    this.mtr.60 = (1 - 0.001^this.conf.s) * this.conf.h;
    this.mtr.80 = (1 - 0.0001^this.conf.s) * this.conf.h;
  );

  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.1;
  gfx_rect(this.conf.x, this.conf.y, this.conf.w, this.conf.h);
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h-2);
  
  gfx_a = 0.4;
  gfx_r = 0; gfx_g = 1; gfx_b = 0;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.mtr.3);
  gfx_r = 1; gfx_g = 0.5; gfx_b = 0;
  gfx_rect(this.conf.x + 1, this.conf.y + this.mtr.3, this.conf.w - 2, this.mtr.6-this.mtr.3);  
  gfx_r = 1; gfx_g = 0; gfx_b = 0;
  gfx_rect(this.conf.x + 1, this.conf.y + this.mtr.6, this.conf.w - 2, this.conf.h-this.mtr.6-1);
      
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  
  gfx_rect(this.conf.x+this.conf.w, this.conf.y, 5, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y - 1;
  gfx_drawstr("0");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.1, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.1 - 1;
  gfx_drawstr("1");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.3, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.3 - 1;
  gfx_drawstr("3");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.6, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.6 - 1;
  gfx_drawstr("6");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.10, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.10 - 1;
  gfx_drawstr("10");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.15, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.15 - 1;
  gfx_drawstr("15");
  
  this.conf.s <= 1.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.20, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.20 - 1;
    gfx_drawstr("20");
  );
  this.conf.s <= 1 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.30, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.30 - 1;
    gfx_drawstr("30");
  );
  this.conf.s <= 0.7 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.40, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.40 - 1;
    gfx_drawstr("40");
  );
  this.conf.s <= 0.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.60, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.60 - 1;
    gfx_drawstr("60");
  );
  this.conf.s <= 0.3 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.80, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.80 - 1;
    gfx_drawstr("80");
  );
  
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.8;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h - 2);

);

function vert_meter_level(input)
(  
  this.conf.x = 434;
  this.conf.y = 70;
  this.conf.w = 7;
  this.conf.h = 300;
  this.conf.s = 0.3;
      
  this.mtr.in = this.conf.h - min((input^this.conf.s) * this.conf.h, this.conf.h-1);
  this.mtr.sgn = this.mtr.in;
  
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.5;
  gfx_rect(this.conf.x, this.conf.y + this.mtr.sgn, this.conf.w, this.conf.h - this.mtr.sgn);
);

function CheckBoxInit(x,y,id,title)
(
  this.x = x; this.y = y; this.title = title; this.id = id;
  gfx_getimgdim(id, this.box.w, this.box.h);
);

function CheckBox()
(
  // Mouse Logic
  mouse_x >= this.x && mouse_x <= this.x+this.box.w && mouse_y >= this.y && mouse_y <= this.y+this.box.h && !_sliderDisabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = this.canChange = 0;
  );
  !mouse_cap ? (this.canChange = 0;);

  this.canChange ? (
    this.value = 1-this.value;
    this.hasEntered = this.hasClicked = this.canChange = 0;
    _sliderDirty = 1;
  );

  // Frame
  /*
  gfx_r = gfx_g = gfx_b = 0.6;
  gfx_rect(this.x,this.y,this.box.w,this.box.h);
  gfx_r = gfx_g = gfx_b = 0.15;
  gfx_rect(this.x+1,this.y+1,this.box.w-2,this.box.h-2);
  */
  
  // Checked
  this.value ? (
    gfx_x = this.x; gfx_y = this.y;
    gfx_blit(this.id,1,0);
  );
    
  this.value; 
);

function HsliderInit(x,y,w,h,f,t,s,d,id,unit,title)
(
  this.x = x; this.y = y; this.w = w; this.h = h;
  this.f = f; this.t = t; this.s = s; this.d = d;
  this.id = id;
  this.unit = unit;
  this.title = title;

  gfx_getimgdim(id, this.knob.w, this.knob.h);
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(this.f - this.t);
  this.dec = "%.0f";
  this.s < 1 ? this.dec = "%.1f";
  this.s < 0.1 ? this.dec = "%.2f";
  this.roPosX = this.x + this.w;
  this.roPosY = floor(this.y + (this.h*0.5));
  this.knobY = ceil(this.y - (this.knob.h*0.5) + (this.h*0.5));
  _sliderInitialized = 1;
);

function Hslider()
(
  // Frame
  /*
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(this.x,this.y,this.w,this.h,0);
  */

  // Mouse Logic
  mouse_x >= this.x && mouse_x <= this.x+this.w && mouse_y >= this.y && mouse_y <= this.y+this.h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - this.x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 1 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - this.x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (this.w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/this.s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + this.f;
    
    mouse_cap & 4 ? this.value = this.d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,this.t),this.f);
  this.knob.pos = (this.range + this.value - this.t) / (this.range) * (this.w-this.knob.w-2);

  // Knob
  gfx_x = this.x + 1 + this.knob.pos; gfx_y = this.knobY;
  gfx_blit(this.id,1,0);

  // Readout
  !this.noReadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.valStr = strcat(sprintf(#,this.dec,this.value),this.unit);
    gfx_measurestr(this.valStr,this.valStr.w,this.valStr.h);
    gfx_x = this.roPosX; gfx_y = floor(this.roPosY - (this.valStr.h*0.5));
    gfx_drawstr(this.valStr);
  );
    
  this.value;
);

function HselectorInit(x,y,w,h,t,d,mem,id,unit,title)
(
  this.x = x; this.y = y; this.w = w; this.h = h;
  this.t = t; this.d = d; this.mem = mem; this.id = id;
  this.unit = unit;
  this.title = title;

  gfx_getimgdim(id, this.knob.w, this.knob.h);  
  this.knob.hw = this.knob.w * 0.5;
  this.range = this.t;
  this.dec = "%.2f";
  this.roPosX = this.x + this.w;
  this.roPosY = floor(this.y + (this.h*0.5));
  this.knobY = ceil(this.y - (this.knob.h*0.5) + (this.h*0.5));
  _sliderInitialized = 1;
);

function Hselector()
(
  // Frame
  /*
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(this.x,this.y,this.w,this.h,0);
  */

  // Mouse Logic
  mouse_x >= this.x && mouse_x <= this.x+this.w && mouse_y >= this.y && mouse_y <= this.y+this.h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - this.x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 100 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - this.x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (this.w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.value.rect = ceil(this.value.rect);
    this.value = this.value.rect;
    
    mouse_cap & 4 ? this.value = this.d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,this.t),this.f);
  this.knob.pos = (this.range + this.value - this.t) / (this.range) * (this.w-this.knob.w-2);

  // Knob
  gfx_x = this.x + 1 + this.knob.pos; gfx_y = this.knobY;
  gfx_blit(this.id,1,0);

  // Readout
  !this.noReadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    gfxMem = this.mem;
    this.valStr = strcat(sprintf(#,this.dec,gfxMem[this.value]),this.unit);
    gfx_measurestr(this.valStr,this.valStr.w,this.valStr.h);
    gfx_x = this.roPosX; gfx_y = floor(this.roPosY - (this.valStr.h*0.5));
    gfx_drawstr(this.valStr);
  );
    
  this.value;
);

gfx_x = gfx_y = 0;
gfx_blit(1,1,0);

gfx_setfont(1,"Arial",16);

!_sliderInit ? (
  s1.HselectorInit(30,50,250,20,23,4,1000000,0," quarter notes","Tempo");
  s2.HsliderInit(30,50,250,20,0,4000,1,500,0," ms","Delay");
  s3.CheckBoxInit(32,95,2,"Tempo Delay");
  s4.HsliderInit(30,150,250,20,0,100,1,10,0," %","Feedback");
  s5.HsliderInit(30,200,250,20,400,4000,10,2000,0," Hz","Color");
  s6.HsliderInit(30,250,250,20,0,1,0.01,0.05,0,"","Resonance");
  s7.HsliderInit(30,300,250,20,0,1,0.01,1,0,"","Color Mix");
  s8.CheckBoxInit(190,95,2,"Ping Pong");
  s10.HsliderInit(30,350,250,20,-40,10,1,0,0," dB","Dry");
  s11.HsliderInit(30,400,250,20,-40,10,1,0,0," dB","Wet");
  _sliderInit = 1;
);

prm.temDelActive ? (slider1 = s1.Hselector();) : (slider2 = s2.Hslider(););
slider3 = s3.CheckBox();
slider4 = s4.Hslider();
slider5 = s5.Hslider();
slider6 = s6.Hslider();
slider7 = s7.Hslider();
slider8 = s8.CheckBox();
slider10 = s10.Hslider();
slider11 = s11.Hslider();

_sliderDirty ? (
  ProcessSliders();
  _sliderDirty = 0;
);

gfx_setfont(1,"Arial",13);

//mtr0.vert_meter_layout();
mtr1.vert_meter_level(mtrEnv);
mtrEnv = max(mtrEnv-0.01,0);

gfx_x = 430; gfx_y = 10;
gfx_r = gfx_g = gfx_b = 1; gfx_a = 0.2;
gfx_setfont(1,"Arial",12);
gfx_drawstr(buildStr);


